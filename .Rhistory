covar_data.lfc <- log2(drug/ctrl)
ID <- unique(data$ID)
IC50 <- data$IC50_uM[data$Drug == "Niraparib"]
Class <- factor(rep("Sensitive", 10), levels = c("Sensitive", "Resistant"))
Class[ID %in% resistant_models] <- "Resistant"
lfc <- data.frame(ID, IC50, Class, covar_data.lfc)
d <- lfc
#  stat.test <- t_test(d, covar_data.lfc ~ Class, paired = F)
#  stat.test <- add_xy_position(stat.test, x = "Class")
print(ggplot(d, aes(x = Class,
y = covar_data.lfc, label = ID)) +
geom_boxplot() +
geom_text() +
xlab(NULL) +
#    stat_pvalue_manual(stat.test, label = "p", label.size = 3) +
ylab(covar_data_text) +
ggtitle(coculture_text))
}
merged_data <- read.csv("merged_data.csv")
resistant_models <- unique(merged_data$ID[merged_data$Sensitivity_class == "Resistant"])
sensitive_models <- unique(merged_data$ID[merged_data$Sensitivity_class == "Sensitive"])
# attach, detach, search()
#attach(merged_data)
data <- merged_data
# format "log expression" data for limma
# rows = covariates
# cols = samples
fexp <- t(as.matrix(data[, -c(1:6)]))
Treat <- factor(paste(data$Drug, data$Sensitivity_class, sep="."), levels = c("Control.Sensitive",
"Control.Resistant",
"Niraparib.Sensitive",
"Niraparib.Resistant"))
design <- model.matrix(~ 0 + Treat)
colnames(design) <- levels(Treat)
corfit <- duplicateCorrelation(fexp, design, block=data$ID)
fit <- lmFit(fexp, design, cblock = data$ID, correlation = corfit$consensus.correlation)
cm <- makeContrasts(RvsS.DrugVsCtrl =
(Niraparib.Resistant-Control.Resistant)-(Niraparib.Sensitive-Control.Sensitive),
levels=design)
fit2 <- contrasts.fit(fit, cm)
fit2 <- eBayes(fit2)
sigcovar <- topTable(fit2, coef="RvsS.DrugVsCtrl", adjust="BH")
sigcovar
for (n in row.names(sigcovar)){
try(plotCovar(data, n, "All"))
}
data <- subset(merged_data, Coculture == "None")
# format "log expression" data for limma
# rows = covariates
# cols = samples
fexp <- t(as.matrix(data[, -c(1:6)]))
Treat <- factor(paste(data$Drug, data$Sensitivity_class, sep="."), levels = c("Control.Sensitive",
"Control.Resistant",
"Niraparib.Sensitive",
"Niraparib.Resistant"))
design <- model.matrix(~ 0 + Treat)
colnames(design) <- levels(Treat)
corfit <- duplicateCorrelation(fexp, design, block=data$ID)
fit <- lmFit(fexp, design, cblock = data$ID, correlation = corfit$consensus.correlation)
cm <- makeContrasts(RvsS.DrugVsCtrl =
(Niraparib.Resistant-Control.Resistant)-(Niraparib.Sensitive-Control.Sensitive),
levels=design)
fit2 <- contrasts.fit(fit, cm)
fit2 <- eBayes(fit2)
sigcovar <- topTable(fit2, coef="RvsS.DrugVsCtrl", adjust="BH")
sigcovar
for (n in row.names(sigcovar)){
try(plotCovar(data, n, "None"))
}
data <- subset(merged_data, Coculture == "None")
View(data)
data$rsrd
# format "log expression" data for limma
# rows = covariates
# cols = samples
fexp <- t(as.matrix(data[, -c(1:6)]))
Treat <- factor(paste(data$Drug, data$Sensitivity_class, sep="."), levels = c("Control.Sensitive",
"Control.Resistant",
"Niraparib.Sensitive",
"Niraparib.Resistant"))
design <- model.matrix(~ 0 + Treat)
colnames(design) <- levels(Treat)
corfit <- duplicateCorrelation(fexp, design, block=data$ID)
fit <- lmFit(fexp, design, cblock = data$ID, correlation = corfit$consensus.correlation)
cm <- makeContrasts(RvsS.DrugVsCtrl =
(Niraparib.Resistant-Control.Resistant)-(Niraparib.Sensitive-Control.Sensitive),
levels=design)
fit2 <- contrasts.fit(fit, cm)
fit2 <- eBayes(fit2)
sigcovar <- topTable(fit2, coef="RvsS.DrugVsCtrl", adjust="BH")
sigcovar
n = "rsrd"
debugonce(plotCovar)
try(plotCovar(data, n, "None"))
covar_data
covar_data.lfc
ctrl
plotCovar <- function(data, covar_data_text, coculture_text){
covar_data <- data[,covar_data_text]
ctrl <- covar_data[data$Drug == "Control"]
drug <- covar_data[data$Drug == "Niraparib"]
# LFC or DIF?
#covar_data.lfc <- log2(drug/ctrl)
covar_data.lfc <- drug - ctrl
ID <- unique(data$ID)
IC50 <- data$IC50_uM[data$Drug == "Niraparib"]
Class <- factor(rep("Sensitive", 10), levels = c("Sensitive", "Resistant"))
Class[ID %in% resistant_models] <- "Resistant"
lfc <- data.frame(ID, IC50, Class, covar_data.lfc)
d <- lfc
#  stat.test <- t_test(d, covar_data.lfc ~ Class, paired = F)
#  stat.test <- add_xy_position(stat.test, x = "Class")
print(ggplot(d, aes(x = Class,
y = covar_data.lfc, label = ID)) +
geom_boxplot() +
geom_text() +
xlab(NULL) +
#    stat_pvalue_manual(stat.test, label = "p", label.size = 3) +
ylab(covar_data_text) +
ggtitle(coculture_text))
}
for (n in row.names(sigcovar)){
try(plotCovar(data, n, "None"))
}
data <- subset(merged_data, Coculture == "PBMCs")
# format "log expression" data for limma
# rows = covariates
# cols = samples
fexp <- t(as.matrix(data[, -c(1:6)]))
Treat <- factor(paste(data$Drug, data$Sensitivity_class, sep="."), levels = c("Control.Sensitive",
"Control.Resistant",
"Niraparib.Sensitive",
"Niraparib.Resistant"))
design <- model.matrix(~ 0 + Treat)
colnames(design) <- levels(Treat)
corfit <- duplicateCorrelation(fexp, design, block=data$ID)
fit <- lmFit(fexp, design, cblock = data$ID, correlation = corfit$consensus.correlation)
cm <- makeContrasts(RvsS.DrugVsCtrl =
(Niraparib.Resistant-Control.Resistant)-(Niraparib.Sensitive-Control.Sensitive),
levels=design)
fit2 <- contrasts.fit(fit, cm)
fit2 <- eBayes(fit2)
sigcovar <- topTable(fit2, coef="RvsS.DrugVsCtrl", adjust="BH")
sigcovar
for (n in row.names(sigcovar)){
try(plotCovar(data, n, "PBMCs"))
}
knitr::opts_chunk$set(echo = TRUE)
library(visdat)
library(ggplot2)
library(ggrepel)
library(gridExtra)
library(ggpubr)
library(rstatix)
source("pairs_plot_helper_functions.R")
data <- read.csv("DataSnapshot_Feb2023/PreCollatedData/Results spreadsheet_14Feb2023.csv", na.strings = c("", "NA"))
data$Drug <- as.factor(data$Drug)
data$Sensitivity_class <- as.factor(data$Sensitivity_class)
data$Coculture[is.na(data$Coculture)] <- "None"
rsr <- read.csv("DataSnapshot_Feb2023/RSRData/RSR_data.csv")
rsr$Coculture <- "None"  # all have no cuculture, may be in csv but read as NA
data <- merge(data, rsr, all = T)
msi <- read.csv("DataSnapshot_Feb2023/MSIData/MSI_data.csv")
msi$Coculture <- "None"
data <- merge(data, msi, all = T)
# Sort by msi
d <- msi[order(msi$msi),]
d$ID <- factor(d$ID, levels = unique(d$ID))
ggplot(d, aes(x = ID, y = msi, fill = Drug)) +
geom_bar(position="dodge", stat="identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ifdata <- read.csv("DataSnapshot_Feb2023/IFdata_FINAL/IF_mean_data_FINAL_reduced.csv")
# label cols with the data type
common_cols <- names(ifdata)[1:3]
if_cols <- names(ifdata)[-c(1:3)]
if_cols <- paste0("if_", if_cols)
names(ifdata) <- c(common_cols, if_cols)
# if_CD45_INVASION without co-culture makes no sense (there are no PBMCs to invade), remove it
#ifdata$if_CD45_INVASION[ifdata$Coculture=="None"] <- NA
#ifdata$if_CD3_INVASION[ifdata$Coculture=="None"] <- NA
#ifdata$if_CD20_INVASION[ifdata$Coculture=="None"] <- NA
data <- merge(data, ifdata, all = T)
pcrdata <- read.csv("DataSnapshot_Feb2023/rtPCRData/rtPCR_Data.csv")
pcrdata$ID <- gsub("-", "_", pcrdata$ID)
pcrdata$ID <- gsub("LU", "Lu", pcrdata$ID)
# label cols with the data type
common_cols <- names(pcrdata)[1:2]
pcr_cols <- names(pcrdata)[-c(1:2)]
pcr_cols <- paste0("pcr_", pcr_cols)
names(pcrdata) <- c(common_cols, pcr_cols)
pcrdata$Coculture <- "None"
data <- merge(data, pcrdata, all = T)
if (is.null(knitr::current_input())) {
filename <- "merged_data.csv"
} else {
filename <- sub(".Rmd$", "_merged_data.csv", knitr::current_input())
}
write.csv(data, file = filename, row.names = F, na = "")
d <- subset(data, Drug == "Niraparib" & Coculture == "None")
knitr::kable(d[,c(1,2,4,5)], row.names = FALSE)
selected_cols <- c(1, 2, 6, grep("IC50_", names(data)),
grep("db_", names(data)),
grep("rsr", names(data)),
grep("msi", names(data)),
grep("ts_", names(data)),
grep("if_.*_tot", names(data)),
grep("if_.*_INVASION", names(data)),
grep("pcr_", names(data)),
grep("fc_PDL1_mfi", names(data)),
grep("fc_EpCAM_mfi", names(data)))
d <- subset(data, Coculture == "None")
d <- d[, selected_cols]
# Make a none co-culture data frame for later use
data_no_coculture <- d
vis_dat(d) +
scale_y_continuous(breaks = c(1:length(d$ID)),
labels = d$ID,
name = "") +
theme(axis.text = element_text(size = 3))
selected_cols <- c(1, 2, 6, grep("fc_", names(data)),
grep("if_", names(data)))
d <- subset(data, Coculture == "PBMCs")
d <- d[, selected_cols]
# Make a co-culture data frame for later use
data_coculture <- d
vis_dat(d) +
scale_y_continuous(breaks = c(1:length(d$ID)),
labels = d$ID,
name = "") +
theme(axis.text = element_text(size = 3))
# Also, now make a wide table of co-cultured and not
# Label any duplicate cols with "_cocult"
data_wide_coculture <- merge(data_no_coculture, data_coculture,
by = c("ID", "Drug", "Sensitivity_class"),
suffixes = c("", "_cocult"))
d <- subset(data_no_coculture, Drug == "Niraparib")
ggplot(d, aes(x = IC50_uM_QC, y = IC50_uM)) +
geom_abline(slope = 1, linetype = 3) +
geom_smooth(method = 'glm', formula = y ~ x) +
geom_point(aes(colour = Sensitivity_class), size = 3) +
geom_text_repel(aes(label = ID))
with(d, cor.test(x = IC50_uM_QC, y = IC50_uM, method = "pearson"))
# Choose numeric columns from none co-cultured data
#df <- data_wide_coculture     # All data
df <- data_wide_coculture[,-grep("^db_", names(data_wide_coculture))]  # exclude dotblots
d <- as.matrix(df[,-c(1,2,3)])
row.names(d) <- df$ID
sidecols <- ifelse(df$Drug == "Control", "#CCCCCC", "#FF0000")
d[] <- apply(d, 2, scale)
# Replacing Na by 0
is.na(d) <- sapply(d, is.infinite)
d[is.na(d)] <- 0
d[is.nan(d)] <- 0
# transpose d to put patients in columns and plt heatmap
heatmap(t(d), na.rm = TRUE, scale = "none", cexRow = 0.1,
ColSideColors = sidecols, col = hcl.colors(12, "YlOrRd", rev = TRUE))
legend(x="right", legend=c("max", "med", "min", "", "ctrl", "Nir"),
fill=c(hcl.colors(3, "YlOrRd", rev = FALSE), "#FFFFFF", "#CCCCCC", "#FF0000"),
border = FALSE, bty = "n")
# Create a drug effect data set that we can use elsewhere and here
ctrl <- subset(data_wide_coculture, Drug == "Control")
drug <- subset(data_wide_coculture, Drug == "Niraparib")
# Start new table with labels and IC50
drug_effect_data <- subset(ctrl, select = c(1, 3, 4, 5))
# Get a list of variables that we can use log fold change for
# mfi values have bg autofluorescence and voltage normalisation issues
# but we think gain is the major factor and lfc is the appropriate measure
lfc_vars <- colnames(ctrl)[c(grep("^db_", colnames(ctrl)),
grep("^ts_", colnames(ctrl)),
grep("^if_", colnames(ctrl)),
grep("^pcr_", colnames(ctrl)),
grep("^fc_.*_mfi", colnames(ctrl)),
grep("^fc_.*_pop", colnames(ctrl)) )]
# Calc lfc vars
for(var in lfc_vars){
new_var <- paste0(var, ".lfc")
drug_effect_data[, new_var] <- log2(drug[, var] / ctrl[, var])
# If we had a zero somewhere, will get Inf or -Inf, count this as missing
drug_effect_data[is.infinite(drug_effect_data[, new_var]), new_var] <- NA
}
# Get a list of variables that we should use difference for
# RSR goes negative, no absolute zero
dif_vars <- colnames(ctrl)[c(grep("^rsr", colnames(ctrl)),
grep("^msi", colnames(ctrl)) )]
# Calc difference vars
for(var in dif_vars){
new_var <- paste0(var, ".dif")
drug_effect_data[, new_var] <- drug[, var] - ctrl[, var]
}
# Make a merged data set that may be useful
merge_data <- merge(data_wide_coculture, drug_effect_data)
# Plot heatmap of just changes
#df <- drug_effect_data     # All data
df <- drug_effect_data[,-grep("^db_", names(drug_effect_data))]  # exclude dotblots
d <- df[,-c(1,2,3,4)]
row.names(d) <- drug_effect_data$ID
sidecols <- ifelse(drug_effect_data$Sensitivity_class == "Sensitive", "#4444FF", "#FF4444")
#d[] <- apply(d, 2, scale)
# Do not use scale but just divide by sd to keep the zero point
dividebysd <- function(x) {x/sd(x, na.rm = T)}
d[] <- apply(d, 2, dividebysd)
# asinh scale selected ones for visibility
d$rsrd.dif <- asinh(d$rsrd.dif)
# Now convert to matrix
d <- as.matrix(d)
# Replacing Na by 0
is.na(d) <- sapply(d, is.infinite)
d[is.na(d)] <- 0
d[is.nan(d)] <- 0
# transpose d to put patients in columns and plt heatmap
heatmap(t(d), na.rm = TRUE, scale = "none", cexRow = 0.1,
ColSideColors = sidecols, col = hcl.colors(12, "Blue-Red 3", rev = FALSE))
legend(x="right", legend=c("+ve", "0", "-ve", "", "Sen", "Rst"),
fill=c(hcl.colors(3, "Blue-Red 3", rev = TRUE), "#FFFFFF", "#4444FF", "#FF4444"),
border = FALSE, bty = "n")
# Select cols
a <- drug_effect_data[, c(1,2,
grep("_mfi.lfc", names(drug_effect_data)),
grep("if_.*.lfc", names(drug_effect_data)),
grep("rsr.*.dif", names(drug_effect_data)),
grep("msi.dif", names(drug_effect_data)),
grep("pcr_.*.dif", names(drug_effect_data)),
grep("ts_.*.lfc", names(drug_effect_data)),
#grep("db_.*.lfc", names(drug_effect_data)),
grep("_pop.lfc", names(drug_effect_data)) )]
b <- subset(data_wide_coculture, Drug == "Control")[, c(1,
grep("_pop", names(data_wide_coculture)),
grep("if_", names(data_wide_coculture)),
grep("rsr", names(data_wide_coculture)),
grep("msi", names(data_wide_coculture)),
grep("ts_", names(data_wide_coculture)) )]
# Remove cols
a <- subset(a, select = -c(grep("DAPI", names(a))))
b <- subset(b, select = -c(grep("DAPI", names(b))))
# Remove samples from certain cols
a[a$ID %in% c("HN_X_29", "HN_X_31"), grep("fc_PDL1", names(a))] <- NA
# merge drug effect and ctrl data
df <- merge(a, b)
rm(a)
rm(b)
# Choose numeric columns from none co-cultured data
d <- as.matrix(df[,-c(1,2)])
row.names(d) <- df$ID
sidecols <- ifelse(df$Sensitivity_class == "Sensitive", "#4444FF", "#FF4444")
d[] <- apply(d, 2, scale)
# Replacing Na by 0
is.na(d) <- sapply(d, is.infinite)
d[is.na(d)] <- 0
d[is.nan(d)] <- 0
# transpose d to put patients in columns and plt heatmap
heatmap(t(d), na.rm = TRUE, scale = "none", cexRow = 0.1,
ColSideColors = sidecols, col = hcl.colors(12, "YlOrRd", rev = TRUE))
legend(x="right", legend=c("max", "med", "min", "", "Sen", "Rst"),
fill=c(hcl.colors(3, "YlOrRd", rev = FALSE), "#FFFFFF", "#4444FF", "#FF4444"),
border = FALSE, bty = "n")
d <- subset(drug_effect_data, Sensitivity_class == "Resistant")
d$Cancer_type <- ifelse(grepl("HN", d$ID), "HN", "Lu")
stat.test <- d %>% t_test(db_TIGIT.lfc ~ Cancer_type) %>% add_xy_position(x = "Cancer_type")
p1 <- ggplot(d, aes(x = Cancer_type, y = db_TIGIT.lfc)) +
geom_boxplot() +
geom_point() +
xlab(NULL) +
stat_pvalue_manual(stat.test, label = "p", vjust = 1.4, label.size = 3)
stat.test <- d %>% t_test(db_CD112.lfc ~ Cancer_type) %>% add_xy_position(x = "Cancer_type")
p2 <- ggplot(d, aes(x = Cancer_type, y = db_CD112.lfc)) +
geom_boxplot() +
geom_point() +
xlab(NULL) +
stat_pvalue_manual(stat.test, label = "p", vjust = 1.4, label.size = 3)
stat.test <- d %>% t_test(db_CD96.lfc ~ Cancer_type) %>% add_xy_position(x = "Cancer_type")
p3 <- ggplot(d, aes(x = Cancer_type, y = db_CD96.lfc)) +
geom_boxplot() +
geom_point()  +
xlab(NULL) +
stat_pvalue_manual(stat.test, label = "p", vjust = 1.4, label.size = 3)
stat.test <- d %>% t_test(db_CD80.lfc ~ Cancer_type) %>% add_xy_position(x = "Cancer_type")
p4 <- ggplot(d, aes(x = Cancer_type, y = db_CD80.lfc)) +
geom_boxplot() +
geom_point()  +
xlab(NULL) +
stat_pvalue_manual(stat.test, label = "p", vjust = 1.4, label.size = 3)
stat.test <- d %>% t_test(db_CD226.lfc ~ Cancer_type) %>% add_xy_position(x = "Cancer_type")
p5 <- ggplot(d, aes(x = Cancer_type, y = db_CD226.lfc)) +
geom_boxplot() +
geom_point()  +
xlab(NULL) +
stat_pvalue_manual(stat.test, label = "p", vjust = 1.4, label.size = 3)
stat.test <- d %>% t_test(db_S100A9.lfc ~ Cancer_type) %>% add_xy_position(x = "Cancer_type")
p6 <- ggplot(d, aes(x = Cancer_type, y = db_S100A9.lfc)) +
geom_boxplot() +
geom_point() +
xlab(NULL) +
stat_pvalue_manual(stat.test, label = "p", vjust = 1.4, label.size = 3)
stat.test <- d %>% t_test(db_P4HA1.lfc ~ Cancer_type) %>% add_xy_position(x = "Cancer_type")
p7 <- ggplot(d, aes(x = Cancer_type, y = db_P4HA1.lfc)) +
geom_boxplot() +
geom_point()  +
xlab(NULL) +
stat_pvalue_manual(stat.test, label = "p", vjust = 1.4, label.size = 3)
stat.test <- d %>% t_test(db_PD1.lfc ~ Cancer_type) %>% add_xy_position(x = "Cancer_type")
p8 <- ggplot(d, aes(x = Cancer_type, y = db_PD1.lfc)) +
geom_boxplot() +
geom_point() +
xlab(NULL) +
stat_pvalue_manual(stat.test, label = "p", vjust = 1.4, label.size = 3)
grid.arrange(p1, p2, p3, p4, p5, p6, p7, p8, ncol = 4)
#ggplot(d, aes(x = Cancer_type, y = db_PD1.lfc)) +
#  geom_boxplot() +
#  geom_point() +
#  xlab(NULL) +
#  stat_compare_means(label.x = 1.5)
# Select rows
df <- subset(data_no_coculture, Drug == "Control")
# select cols of data
d <- df[,grep("pcr_", names(df))]
d <- d[,-grep(".lfc", names(d))]
d <- as.matrix(d)
row.names(d) <- df$ID
sidecols <- ifelse(df$Sensitivity_class == "Sensitive", "#4444FF", "#FF4444")
d[] <- apply(d, 2, scale)
# Replacing Na by 0
is.na(d) <- sapply(d, is.infinite)
# Select rows
df <- subset(data_no_coculture, Drug == "Control")
# select cols of data
d <- df[,grep("pcr_", names(df))]
d <- d[,-grep(".lfc", names(d))]
# Select rows
df <- subset(data_no_coculture, Drug == "Control")
# select cols of data
d <- df[,grep("pcr_", names(df))]
names(d)
names(df)
# Select rows
df <- subset(data_no_coculture, Drug == "Control")
# select cols of data
d <- df[,grep("pcr_", names(df))]
d <- as.matrix(d)
row.names(d) <- df$ID
sidecols <- ifelse(df$Sensitivity_class == "Sensitive", "#4444FF", "#FF4444")
d[] <- apply(d, 2, scale)
# Replacing Na by 0
is.na(d) <- sapply(d, is.infinite)
d[is.na(d)] <- 0
d[is.nan(d)] <- 0
# transpose d to put patients in columns and plt heatmap
heatmap(t(d), na.rm = TRUE, scale = "none", cexRow = 0.4, cexCol = 1,
ColSideColors = sidecols, col = hcl.colors(12, "YlOrRd", rev = TRUE))
legend(x="right", legend=c("max", "med", "min", "", "Sens", "Rest"),
fill=c(hcl.colors(3, "YlOrRd", rev = FALSE), "#FFFFFF", "#4444FF", "#FF4444"),
border = FALSE, bty = "n")
X <- merge_data[, c(grep("IC50", names(merge_data)),
grep("DNA", names(merge_data)) )]
Y <- merge_data[, grepl("pcr_", names(merge_data)) & !grepl(".dif$", names(merge_data))]
plotDataCrossCorrelations(X, Y, method = "pearson", textSize = 4)
X <- merge_data[, c(grep("IC50", names(merge_data)),
grep("DNA", names(merge_data)) )]
Y <- merge_data[, grepl("pcr_", names(merge_data)) & !grepl(".lfc$", names(merge_data))]
plotDataCrossCorrelations(X, Y, method = "pearson", textSize = 4)
X <- drug_effect_data[, c(grep("IC50", names(drug_effect_data)),
grep("DNA", names(drug_effect_data)) )]
Y <- drug_effect_data[, c(grep("pcr_", names(drug_effect_data)))]
plotDataCrossCorrelations(X, Y, method = "pearson", textSize = 5)
?assays
??dittoheatmap
?dittoHeatmap
a=0.12341413413413
a/a
rm(a)
?spatialexperiment
setwd("C:/Devel/CytoPb")
source("C:/Users/Paul/OneDrive - King's College London/Documents/General/ImageScaleSpace/CytoPb Cell_Type_Probability_Maps/Simulated/test1_6channel/CytoPb_RUN ALL.R")
source("C:/Users/Paul/OneDrive - King's College London/Documents/General/ImageScaleSpace/CytoPb Cell_Type_Probability_Maps/Simulated/test1_6channel/CytoPb_RUN ALL.R")
View(pos_table)
img(filename)
img_filenames
i=1
images <- loadImages(img_filenames[i])   # will be a list of one image
# Check number of channels in image
nChannels <- dim(images[1]@listData[[1]])[3]
image <- images[1]
# Get EBImage
img <- image@listData[[1]][,,channel]
channelNames(images) <- panel_keep$name
image <- images[1]
# Get EBImage
img <- image@listData[[1]][,,channel]
img_blur <- gblur(img, sigma = sigma) # to get the final intensity from
img2 <- medianFilter(normalize(img), 2)
display(normalize(img2))
channelNames(images)
channel = "ch2"
# Get EBImage
img <- image@listData[[1]][,,channel]
img_blur <- gblur(img, sigma = sigma) # to get the final intensity from
img2 <- medianFilter(normalize(img), 2)
display(normalize(img2))
display(img2)
display(normalize(img2)*10)
display(normalize(img2)*100)
display(normalize(img2)*1000)
#  img3 <- img2 > otsu(img2, range = c(0, max(img2)))
img3 <- normalize(img2) > 0.5
display(img3)
display(normalize(img))
display(normalize(img2))
source("C:/Users/Paul/OneDrive - King's College London/Documents/General/ImageScaleSpace/CytoPb Cell_Type_Probability_Maps/Simulated/test1_6channel/CytoPb_RUN ALL.R")
source("C:/Users/Paul/OneDrive - King's College London/Documents/General/ImageScaleSpace/CytoPb Cell_Type_Probability_Maps/Simulated/test1_6channel/CytoPb_RUN ALL.R")
source("C:/Users/Paul/OneDrive - King's College London/Documents/General/ImageScaleSpace/CytoPb Cell_Type_Probability_Maps/Simulated/test1_6channel/CytoPb_RUN ALL.R")
source("C:/Users/Paul/OneDrive - King's College London/Documents/General/ImageScaleSpace/CytoPb Cell_Type_Probability_Maps/Simulated/test1_6channel/CytoPb_RUN ALL.R")
source("C:/Users/Paul/OneDrive - King's College London/Documents/General/ImageScaleSpace/CytoPb Cell_Type_Probability_Maps/1St CyToF experiment/CytoPb_RUN ALL.R")
source("C:/Users/Paul/OneDrive - King's College London/Documents/General/ImageScaleSpace/CytoPb Cell_Type_Probability_Maps/1St CyToF experiment/CytoPb_RUN ALL.R")
