}
print("CytoPb 2 Working in:")
print(working_folder)
global_data_filename <- paste0(working_folder, "/CytoPb.RData")
# Read previous session
load(global_data_filename)
# folder to save channel QC images to
channel_png_folder <- paste0(working_folder, "/channel_png/")
if(exists("TEST_specific_image") | exists("TEST_specific_channel")){  # For TEST options
channel_png_folder <- paste0(working_folder, "/channel_png_TEST/")
}
dir.create(channel_png_folder, showWarnings = F)
# folder for R objects
objects_folder <- paste0(working_folder, "/objects/")
dir.create(objects_folder, showWarnings = F)
# Read in pos and neg values, user may have tweaked them from last script
pos_table <- read.csv(pos_value_filename)
neg_table <- read.csv(neg_value_filename)
# Are we going to use the global pos and neg values, or individuals for each image?
if(!exists("use_global_ranges")){
use_global = TRUE
}else{
use_global = use_global_ranges
rm(use_global_ranges)   # this stops in going into global_data_filename and being overwritten if changed and rerun
}
# Blue to red pallette
jet.colors = colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))
# If we have set a specific image to test, and this is not that image, continue to next
if(exists("TEST_specific_image")){
if(TEST_specific_image != img_names[i]){
next
}
}
TEST_specific_image != img_names[i]
TEST_specific_image
img_names[i]
i
# Specify or select a working folder
working_folder <- "D:/images/IMC/Claudia/Leap"
# Specify options
image_scale_umperpixel = 1 # um per pixel, default is 1
use_global_ranges = TRUE   # can use a global range for each channel or individual for each image, default is TRUE (in 2)
probability_threshold = 0.1   # Threshold for "high probability", default is 0.5 (in 3)
source("C:/Devel/CytoPb/CytoPb_2 Channel Probabilities.R")
source("C:/Devel/CytoPb/CytoPb_2 Channel Probabilities.R")
# Remove test options so they need to be explicitly set on each run
if(exists("TEST_specific_image")) rm(TEST_specific_image)
if(exists("TEST_specific_channel")) rm(TEST_specific_channel)
source("C:/Devel/CytoPb/CytoPb_2 Channel Probabilities.R")
# Remove test options so they need to be explicitly set on each run
if(exists("TEST_specific_image")) rm(TEST_specific_image)
if(exists("TEST_specific_channel")) rm(TEST_specific_channel)
# Remove test options so they need to be explicitly set on each run
if(exists("TEST_specific_image")) rm(TEST_specific_image)
if(exists("TEST_specific_channel")) rm(TEST_specific_channel)
# Remove test options so they need to be explicitly set on each run
if(exists("TEST_specific_image")) rm(TEST_specific_image)
if(exists("TEST_specific_channel")) rm(TEST_specific_channel)
# Single channel optimisation
TEST_specific_channel <- "CD11b"
#TEST_specific_image <- "Leap24_ROI_001"
source("CytoPb_2 Channel Probabilities.R")
# Single channel optimisation
TEST_specific_channel <- "CD11b"
TEST_specific_image <- "Leap24_ROI_001"
source("CytoPb_2 Channel Probabilities.R")
# Get names of images
img_filenames <- list.files(image_location, pattern = "*.tif", full.names = T)
img_names <- str_before_last_dot(list.files(image_location, pattern = "*.tif", full.names = F))
im_names
img_names
# Save everything so far
save.image(file = global_data_filename)
source("D:/Images/IMC/Claudia/Leap/CytoPb_RUN ALL.R")
knitr::opts_chunk$set(echo = TRUE)
library(visdat)
library(ggplot2)
library(ggrepel)
library(gridExtra)
library(ggpubr)
library(rstatix)
source("pairs_plot_helper_functions.R")
data <- read.csv("DataSnapshot_Feb2023/PreCollatedData/Results spreadsheet_14Feb2023.csv", na.strings = c("", "NA"))
data$Drug <- as.factor(data$Drug)
data$Sensitivity_class <- as.factor(data$Sensitivity_class)
data$Coculture[is.na(data$Coculture)] <- "None"
rsr <- read.csv("DataSnapshot_Feb2023/RSRData/RSR_data.csv")
rsr$Coculture <- "None"  # all have no cuculture, may be in csv but read as NA
data <- merge(data, rsr, all = T)
msi <- read.csv("DataSnapshot_Feb2023/MSIData/MSI_data.csv")
msi$Coculture <- "None"
data <- merge(data, msi, all = T)
# Sort by msi
d <- msi[order(msi$msi),]
d$ID <- factor(d$ID, levels = unique(d$ID))
ggplot(d, aes(x = ID, y = msi, fill = Drug)) +
geom_bar(position="dodge", stat="identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ifdata <- read.csv("DataSnapshot_Feb2023/IFdata_FINAL/IF_mean_data_FINAL_reduced.csv")
# label cols with the data type
common_cols <- names(ifdata)[1:3]
if_cols <- names(ifdata)[-c(1:3)]
if_cols <- paste0("if_", if_cols)
names(ifdata) <- c(common_cols, if_cols)
# if_CD45_INVASION without co-culture makes no sense (there are no PBMCs to invade), remove it
#ifdata$if_CD45_INVASION[ifdata$Coculture=="None"] <- NA
#ifdata$if_CD3_INVASION[ifdata$Coculture=="None"] <- NA
#ifdata$if_CD20_INVASION[ifdata$Coculture=="None"] <- NA
data <- merge(data, ifdata, all = T)
pcrdata <- read.csv("DataSnapshot_Feb2023/rtPCRData/rtPCR_Data.csv")
pcrdata$ID <- gsub("-", "_", pcrdata$ID)
pcrdata$ID <- gsub("LU", "Lu", pcrdata$ID)
# label cols with the data type
common_cols <- names(pcrdata)[1:2]
pcr_cols <- names(pcrdata)[-c(1:2)]
pcr_cols <- paste0("pcr_", pcr_cols)
names(pcrdata) <- c(common_cols, pcr_cols)
pcrdata$Coculture <- "None"
data <- merge(data, pcrdata, all = T)
if (is.null(knitr::current_input())) {
filename <- "merged_data.csv"
} else {
filename <- sub(".Rmd$", "_merged_data.csv", knitr::current_input())
}
write.csv(data, file = filename, row.names = F, na = "")
d <- subset(data, Drug == "Niraparib" & Coculture == "None")
knitr::kable(d[,c(1,2,4,5)], row.names = FALSE)
selected_cols <- c(1, 2, 6, grep("IC50_", names(data)),
grep("db_", names(data)),
grep("rsr", names(data)),
grep("msi", names(data)),
grep("ts_", names(data)),
grep("if_.*_tot", names(data)),
grep("if_.*_INVASION", names(data)),
grep("pcr_", names(data)),
grep("fc_PDL1_mfi", names(data)),
grep("fc_EpCAM_mfi", names(data)))
d <- subset(data, Coculture == "None")
d <- d[, selected_cols]
# Make a none co-culture data frame for later use
data_no_coculture <- d
vis_dat(d) +
scale_y_continuous(breaks = c(1:length(d$ID)),
labels = d$ID,
name = "") +
theme(axis.text = element_text(size = 3))
selected_cols <- c(1, 2, 6, grep("fc_", names(data)),
grep("if_", names(data)))
d <- subset(data, Coculture == "PBMCs")
d <- d[, selected_cols]
# Make a co-culture data frame for later use
data_coculture <- d
vis_dat(d) +
scale_y_continuous(breaks = c(1:length(d$ID)),
labels = d$ID,
name = "") +
theme(axis.text = element_text(size = 3))
# Also, now make a wide table of co-cultured and not
# Label any duplicate cols with "_cocult"
data_wide_coculture <- merge(data_no_coculture, data_coculture,
by = c("ID", "Drug", "Sensitivity_class"),
suffixes = c("", "_cocult"))
d <- subset(data_no_coculture, Drug == "Niraparib")
ggplot(d, aes(x = IC50_uM_QC, y = IC50_uM)) +
geom_abline(slope = 1, linetype = 3) +
geom_smooth(method = 'glm', formula = y ~ x) +
geom_point(aes(colour = Sensitivity_class), size = 3) +
geom_text_repel(aes(label = ID))
with(d, cor.test(x = IC50_uM_QC, y = IC50_uM, method = "pearson"))
ggplot(drug_effect_data, aes(x = IC50_uM_QC, y = rsrd.dif)) +
geom_smooth(method = 'glm', formula = y ~ x) +
geom_point(aes(colour = Sensitivity_class), size = 3) +
geom_text_repel(aes(label = ID), size = 3)
# Get the change with drug as a dif, and again reformat in new dataframe to plot
# Calculate dif here to make it independent to the global dif/lfc decision
# also using mfi..dif here
ctrl_none <- data_no_coculture$fc_PDL1_mfi[data_no_coculture$Drug == "Control"]
drug_none <- data_no_coculture$fc_PDL1_mfi[data_no_coculture$Drug == "Niraparib"]
ctrl_pbmc <- data_coculture$fc_PDL1_mfi[data_coculture$Drug == "Control"]
drug_pbmc <- data_coculture$fc_PDL1_mfi[data_coculture$Drug == "Niraparib"]
fc_PDL1_mfi_coculture.dif <- drug_pbmc - ctrl_pbmc
fc_PDL1_mfi_none.dif <- drug_none - ctrl_none
fc_PDL1_mfi..dif <- c(fc_PDL1_mfi_none.dif, fc_PDL1_mfi_coculture.dif)
ID <- c(unique(data_no_coculture$ID), unique(data_coculture$ID))
Condition <- c(rep("None", length(drug_none)), rep("Coculture", length(drug_pbmc)))
Sensitivity_class <- c(data_no_coculture$Sensitivity_class[c(TRUE, FALSE)], data_coculture$Sensitivity_class[c(TRUE, FALSE)]) # get alternate elements
d <- data.frame(ID, Condition, Sensitivity_class, fc_PDL1_mfi..dif)
# Only resistant models
d <- subset(d, Sensitivity_class == "Resistant")
stat.test <- d %>% t_test(fc_PDL1_mfi..dif ~ Condition, paired = T) %>% add_xy_position(x = "Condition")
ggplot(d, aes(x = factor(Condition, level = c("None", "Coculture")),
y = fc_PDL1_mfi..dif, label = ID)) +
geom_boxplot() +
#  geom_point() +
geom_text() +
geom_line(aes(group = ID)) +
xlab(NULL) +
stat_pvalue_manual(stat.test, label = "p", label.size = 3)
rm(fc_PDL1_mfi_coculture.dif)
rm(fc_PDL1_mfi_none.dif)
rm(fc_PDL1_mfi..dif)
rm(ID)
rm(Condition)
# Get the change with drug as a lfc, and again reformat in new dataframe to plot
# Calculate lfc here to make it independent to the global dif/lfc decision
# also using mfi..lfc here
ctrl_none <- data_no_coculture$fc_PDL1_mfi[data_no_coculture$Drug == "Control"]
drug_none <- data_no_coculture$fc_PDL1_mfi[data_no_coculture$Drug == "Niraparib"]
ctrl_pbmc <- data_coculture$fc_PDL1_mfi[data_coculture$Drug == "Control"]
drug_pbmc <- data_coculture$fc_PDL1_mfi[data_coculture$Drug == "Niraparib"]
fc_PDL1_mfi_coculture.lfc <- log2(drug_pbmc/ctrl_pbmc)
fc_PDL1_mfi_none.lfc <- log2(drug_none/ctrl_none)
fc_PDL1_mfi..lfc <- c(fc_PDL1_mfi_none.lfc, fc_PDL1_mfi_coculture.lfc)
ID <- c(unique(data_no_coculture$ID), unique(data_coculture$ID))
Condition <- c(rep("None", length(drug_none)), rep("Coculture", length(drug_pbmc)))
Sensitivity_class <- c(data_no_coculture$Sensitivity_class[c(TRUE, FALSE)], data_coculture$Sensitivity_class[c(TRUE, FALSE)]) # get alternate elements
d <- data.frame(ID, Condition, Sensitivity_class, fc_PDL1_mfi..lfc)
# Only resistant models
d <- subset(d, Sensitivity_class == "Resistant")
stat.test <- d %>% t_test(fc_PDL1_mfi..lfc ~ Condition, paired = T) %>% add_xy_position(x = "Condition")
ggplot(d, aes(x = factor(Condition, level = c("None", "Coculture")),
y = fc_PDL1_mfi..lfc, label = ID)) +
geom_boxplot() +
#geom_point() +
geom_text() +
geom_line(aes(group = ID)) +
xlab(NULL) +
stat_pvalue_manual(stat.test, label = "p", label.size = 3)
rm(ctrl_none)
rm(drug_none)
rm(ctrl_pbmc)
rm(drug_pbmc)
rm(fc_PDL1_mfi..lfc)
rm(fc_PDL1_mfi_coculture.lfc)
rm(fc_PDL1_mfi_none.lfc)
rm(ID)
rm(Condition)
rm(Sensitivity_class)
# Create a drug effect data set that we can use elsewhere and here
ctrl <- subset(data_wide_coculture, Drug == "Control")
drug <- subset(data_wide_coculture, Drug == "Niraparib")
# Start new table with labels and IC50
drug_effect_data <- subset(ctrl, select = c(1, 3, 4, 5))
# Get a list of variables that we can use log fold change for
# mfi values have bg autofluorescence and voltage normalisation issues
# but we think gain is the major factor and lfc is the appropriate measure
lfc_vars <- colnames(ctrl)[c(grep("^db_", colnames(ctrl)),
grep("^ts_", colnames(ctrl)),
grep("^if_", colnames(ctrl)),
grep("^pcr_", colnames(ctrl)),
grep("^fc_.*_mfi", colnames(ctrl)),
grep("^fc_.*_pop", colnames(ctrl)) )]
# Calc lfc vars
for(var in lfc_vars){
new_var <- paste0(var, ".lfc")
drug_effect_data[, new_var] <- log2(drug[, var] / ctrl[, var])
# If we had a zero somewhere, will get Inf or -Inf, count this as missing
drug_effect_data[is.infinite(drug_effect_data[, new_var]), new_var] <- NA
}
# Get a list of variables that we should use difference for
# RSR goes negative, no absolute zero
dif_vars <- colnames(ctrl)[c(grep("^rsr", colnames(ctrl)),
grep("^msi", colnames(ctrl)) )]
# Calc difference vars
for(var in dif_vars){
new_var <- paste0(var, ".dif")
drug_effect_data[, new_var] <- drug[, var] - ctrl[, var]
}
# Make a merged data set that may be useful
merge_data <- merge(data_wide_coculture, drug_effect_data)
ggplot(drug_effect_data, aes(x = IC50_uM_QC, y = rsrd.dif)) +
geom_smooth(method = 'glm', formula = y ~ x) +
geom_point(aes(colour = Sensitivity_class), size = 3) +
geom_text_repel(aes(label = ID), size = 3)
with(drug_effect_data, cor.test(x = IC50_uM_QC, y = rsrd.dif, method = "pearson"))
ggplot(drug_effect_data, aes(x = IC50_uM, y = rsrd.dif)) +
geom_smooth(method = 'glm', formula = y ~ x) +
geom_point(aes(colour = Sensitivity_class), size = 3) +
geom_text_repel(aes(label = ID), size = 3)
with(drug_effect_data, cor.test(x = IC50_uM_QC, y = rsrd.dif, method = "pearson"))
ggplot(drug_effect_data, aes(x = IC50_uM_QC, y = rsrd.dif)) +
geom_smooth(method = 'glm', formula = y ~ x) +
geom_point(aes(colour = Sensitivity_class), size = 3) +
geom_text_repel(aes(label = ID), size = 3)
with(drug_effect_data, cor.test(x = IC50_uM_QC, y = rsrd.dif, method = "pearson"))
ggplot(drug_effect_data, aes(x = IC50_uM_QC, y = rsrd.dif)) +
geom_smooth(method = 'glm', formula = y ~ x) +
geom_point(aes(shape = Sensitivity_class), size = 3) +
geom_text_repel(aes(label = ID), size = 3)
ggplot(drug_effect_data, aes(x = IC50_uM_QC, y = rsrd.dif)) +
geom_smooth(method = 'glm', formula = y ~ x) +
geom_point(aes(shape = Sensitivity_class), size = 3) +
geom_text_repel(aes(label = ID), size = 3) +
theme_bw()
ggplot(drug_effect_data, aes(x = IC50_uM_QC, y = rsrd.dif)) +
geom_smooth(method = 'glm', formula = y ~ x, colour = "grey") +
geom_point(aes(shape = Sensitivity_class), size = 3) +
geom_text_repel(aes(label = ID), size = 3) +
theme_bw()
ggplot(drug_effect_data, aes(x = IC50_uM_QC, y = rsrd.dif)) +
geom_smooth(method = 'glm', formula = y ~ x, colour = "grey") +
geom_point(aes(shape = Sensitivity_class), size = 3) +
geom_text_repel(aes(label = ID), size = 3) +
theme_minimal()
ggplot(drug_effect_data, aes(x = IC50_uM_QC, y = rsrd.dif)) +
geom_smooth(method = 'glm', formula = y ~ x, colour = "grey") +
geom_point(aes(shape = Sensitivity_class), size = 3) +
geom_text_repel(aes(label = ID), size = 3) +
theme_pubclean()
ggplot(drug_effect_data, aes(x = IC50_uM_QC, y = rsrd.dif)) +
geom_smooth(method = 'glm', formula = y ~ x, colour = "grey") +
geom_point(aes(shape = Sensitivity_class), size = 3) +
geom_text_repel(aes(label = ID), size = 3) +
theme_pubr()
ggplot(drug_effect_data, aes(x = IC50_uM_QC, y = rsrd.dif)) +
geom_smooth(method = 'glm', formula = y ~ x, colour = "grey") +
geom_point(aes(shape = Sensitivity_class), size = 3) +
geom_text_repel(aes(label = ID), size = 3) +
theme_classic()
ggplot(drug_effect_data, aes(x = IC50_uM_QC, y = rsrd.dif)) +
geom_smooth(method = 'glm', formula = y ~ x, colour = "grey") +
geom_point(aes(shape = Sensitivity_class), size = 3) +
geom_text_repel(aes(label = ID), size = 3) +
theme_classic()
ggplot(drug_effect_data, aes(x = IC50_uM_QC, y = rsrd.dif)) +
geom_smooth(method = 'glm', formula = y ~ x, colour = "grey") +
geom_point(aes(shape = Sensitivity_class), size = 3) +
geom_text_repel(aes(label = ID), size = 3) +
theme_classic()
ggplot(drug_effect_data, aes(x = IC50_uM, y = ts_medDNAlength1_molarity.lfc)) +
geom_smooth(method = 'glm', formula = y ~ x) +
geom_point(aes(colour = Sensitivity_class), size = 3) +
geom_text_repel(aes(label = ID), size = 3)
ggplot(drug_effect_data, aes(x = IC50_uM, y = ts_medDNAlength1_molarity.lfc)) +
geom_smooth(method = 'glm', formula = y ~ x, colour = "grey") +
geom_point(aes(shape = Sensitivity_class), size = 3) +
geom_text_repel(aes(label = ID), size = 3) +
theme_classic()
ggplot(data_wide_coculture, aes(x = IC50_uM, y = if_Ki67_tot)) +
geom_smooth(method = 'glm', formula = y ~ x) +
geom_point(aes(colour = Sensitivity_class, shape = Drug), size = 3) +
geom_text_repel(aes(label = ID), size = 3)
ggplot(data_wide_coculture, aes(x = IC50_uM, y = if_Ki67_tot)) +
geom_smooth(method = 'glm', formula = y ~ x, colour = "grey") +
geom_point(aes(shape = Sensitivity_class), size = 3) +
geom_text_repel(aes(label = ID), size = 3) +
theme_classic()
ggplot(drug_effect_data, aes(x = IC50_uM, y = if_CD45_INVASION_cocult.lfc)) +
geom_smooth(method = 'glm', formula = y ~ x) +
geom_point(aes(colour = Sensitivity_class), size = 3) +
geom_text_repel(aes(label = ID), size = 3)
with(drug_effect_data, cor.test(x = IC50_uM, y = if_CD45_INVASION_cocult.lfc, method = "pearson"))
ggplot(drug_effect_data, aes(x = IC50_uM, y = if_CD45_INVASION_cocult.lfc)) +
geom_smooth(method = 'glm', formula = y ~ x, colour = "grey") +
geom_point(aes(shape = Sensitivity_class), size = 3) +
geom_text_repel(aes(label = ID), size = 3) +
theme_classic()
ggplot(drug_effect_data, aes(x = IC50_uM, y = fc_CD3_infil_pop.lfc)) +
geom_smooth(method = 'glm', formula = y ~ x) +
geom_point(aes(colour = Sensitivity_class), size = 3) +
geom_text_repel(aes(label = ID), size = 3)
ggplot(drug_effect_data, aes(x = IC50_uM, y = fc_CD3_infil_pop.lfc)) +
geom_smooth(method = 'glm', formula = y ~ x, colour = "grey") +
geom_point(aes(shape = Sensitivity_class), size = 3) +
geom_text_repel(aes(label = ID), size = 3) +
theme_classic()
ggplot(drug_effect_data, aes(x = IC50_uM, y = fc_PDL1_mfi_cocult.lfc)) +
geom_smooth(method = 'glm', formula = y ~ x) +
geom_point(aes(colour = Sensitivity_class), size = 3) +
geom_text_repel(aes(label = ID), size = 3)
ggplot(drug_effect_data, aes(x = IC50_uM, y = fc_PDL1_mfi_cocult.lfc - fc_PDL1_mfi.lfc)) +
geom_smooth(method = 'glm', formula = y ~ x) +
geom_point(aes(colour = Sensitivity_class), size = 3) +
geom_text_repel(aes(label = ID), size = 3)
with(drug_effect_data, cor.test(x = IC50_uM, y = fc_PDL1_mfi_cocult.lfc - fc_PDL1_mfi.lfc, method = "pearson"))
ggplot(drug_effect_data, aes(x = IC50_uM, y = fc_PDL1_mfi_cocult.lfc - fc_PDL1_mfi.lfc)) +
geom_smooth(method = 'glm', formula = y ~ x, colour = "grey") +
geom_point(aes(shape = Sensitivity_class), size = 3) +
geom_text_repel(aes(label = ID), size = 3) +
theme_classic()
# Select cols
a <- drug_effect_data[, c(1,2,
grep("_mfi.lfc", names(drug_effect_data)),
grep("if_.*.lfc", names(drug_effect_data)),
grep("rsr.*.dif", names(drug_effect_data)),
grep("msi.dif", names(drug_effect_data)),
grep("pcr_.*.dif", names(drug_effect_data)),
grep("ts_.*.lfc", names(drug_effect_data)),
#grep("db_.*.lfc", names(drug_effect_data)),
grep("_pop.lfc", names(drug_effect_data)) )]
b <- subset(data_wide_coculture, Drug == "Control")[, c(1,
grep("_pop", names(data_wide_coculture)),
grep("if_", names(data_wide_coculture)),
grep("rsr", names(data_wide_coculture)),
grep("msi", names(data_wide_coculture)),
grep("ts_", names(data_wide_coculture)) )]
# Remove cols
a <- subset(a, select = -c(grep("DAPI", names(a))))
b <- subset(b, select = -c(grep("DAPI", names(b))))
# Remove samples from certain cols
a[a$ID %in% c("HN_X_29", "HN_X_31"), grep("fc_PDL1", names(a))] <- NA
# merge drug effect and ctrl data
df <- merge(a, b)
rm(a)
rm(b)
# Choose numeric columns from none co-cultured data
d <- as.matrix(df[,-c(1,2)])
row.names(d) <- df$ID
sidecols <- ifelse(df$Sensitivity_class == "Sensitive", "#4444FF", "#FF4444")
d[] <- apply(d, 2, scale)
# Replacing Na by 0
is.na(d) <- sapply(d, is.infinite)
d[is.na(d)] <- 0
d[is.nan(d)] <- 0
# transpose d to put patients in columns and plt heatmap
heatmap(t(d), na.rm = TRUE, scale = "none", cexRow = 0.1,
ColSideColors = sidecols, col = hcl.colors(12, "YlOrRd", rev = TRUE))
legend(x="right", legend=c("max", "med", "min", "", "Sen", "Rst"),
fill=c(hcl.colors(3, "YlOrRd", rev = FALSE), "#FFFFFF", "#4444FF", "#FF4444"),
border = FALSE, bty = "n")
# Select cols
a <- drug_effect_data[, c(1,2,
grep("_mfi.lfc", names(drug_effect_data)),
grep("if_.*.lfc", names(drug_effect_data)),
grep("rsr.*.dif", names(drug_effect_data)),
grep("msi.dif", names(drug_effect_data)),
grep("pcr_.*.dif", names(drug_effect_data)),
grep("ts_.*.lfc", names(drug_effect_data)),
#grep("db_.*.lfc", names(drug_effect_data)),
grep("_pop.lfc", names(drug_effect_data)) )]
b <- subset(data_wide_coculture, Drug == "Control")[, c(1,
grep("_pop", names(data_wide_coculture)),
grep("if_", names(data_wide_coculture)),
grep("rsr", names(data_wide_coculture)),
grep("msi", names(data_wide_coculture)),
grep("ts_", names(data_wide_coculture)) )]
# Remove cols
a <- subset(a, select = -c(grep("DAPI", names(a))))
b <- subset(b, select = -c(grep("DAPI", names(b))))
# Remove samples from certain cols
a[a$ID %in% c("HN_X_29", "HN_X_31"), grep("fc_PDL1", names(a))] <- NA
# merge drug effect and ctrl data
df <- merge(a, b)
rm(a)
rm(b)
# Choose numeric columns from none co-cultured data
d <- as.matrix(df[,-c(1,2)])
row.names(d) <- df$ID
#sidecols <- ifelse(df$Sensitivity_class == "Sensitive", "#4444FF", "#FF4444")
sidecols <- ifelse(df$Sensitivity_class == "Sensitive", "#444444", "#AAAAAA")
d[] <- apply(d, 2, scale)
# Replacing Na by 0
is.na(d) <- sapply(d, is.infinite)
d[is.na(d)] <- 0
d[is.nan(d)] <- 0
# transpose d to put patients in columns and plt heatmap
heatmap(t(d), na.rm = TRUE, scale = "none", cexRow = 0.1,
ColSideColors = sidecols, col = hcl.colors(12, "YlOrRd", rev = TRUE))
legend(x="right", legend=c("max", "med", "min", "", "Sen", "Rst"),
fill=c(hcl.colors(3, "YlOrRd", rev = FALSE), "#FFFFFF", "#4444FF", "#FF4444"),
border = FALSE, bty = "n")
# Select cols
a <- drug_effect_data[, c(1,2,
grep("_mfi.lfc", names(drug_effect_data)),
grep("if_.*.lfc", names(drug_effect_data)),
grep("rsr.*.dif", names(drug_effect_data)),
grep("msi.dif", names(drug_effect_data)),
grep("pcr_.*.dif", names(drug_effect_data)),
grep("ts_.*.lfc", names(drug_effect_data)),
#grep("db_.*.lfc", names(drug_effect_data)),
grep("_pop.lfc", names(drug_effect_data)) )]
b <- subset(data_wide_coculture, Drug == "Control")[, c(1,
grep("_pop", names(data_wide_coculture)),
grep("if_", names(data_wide_coculture)),
grep("rsr", names(data_wide_coculture)),
grep("msi", names(data_wide_coculture)),
grep("ts_", names(data_wide_coculture)) )]
# Remove cols
a <- subset(a, select = -c(grep("DAPI", names(a))))
b <- subset(b, select = -c(grep("DAPI", names(b))))
# Remove samples from certain cols
a[a$ID %in% c("HN_X_29", "HN_X_31"), grep("fc_PDL1", names(a))] <- NA
# merge drug effect and ctrl data
df <- merge(a, b)
rm(a)
rm(b)
# Choose numeric columns from none co-cultured data
d <- as.matrix(df[,-c(1,2)])
row.names(d) <- df$ID
#sidecols <- ifelse(df$Sensitivity_class == "Sensitive", "#4444FF", "#FF4444")
sidecols <- ifelse(df$Sensitivity_class == "Sensitive", "#444444", "#AAAAAA")
d[] <- apply(d, 2, scale)
# Replacing Na by 0
is.na(d) <- sapply(d, is.infinite)
d[is.na(d)] <- 0
d[is.nan(d)] <- 0
# transpose d to put patients in columns and plt heatmap
heatmap(t(d), na.rm = TRUE, scale = "none", cexRow = 0.1,
ColSideColors = sidecols, col = hcl.colors(12, "YlOrRd", rev = TRUE))
legend(x="right", legend=c("max", "med", "min", "", "Sen", "Rst"),
fill=c(hcl.colors(3, "YlOrRd", rev = FALSE), "#FFFFFF", "#444444", "#AAAAAA"),
border = FALSE, bty = "n")
ggplot(data_wide_coculture, aes(x = IC50_uM, y = if_Ki67_tot)) +
geom_smooth(method = 'glm', formula = y ~ x, colour = "grey") +
geom_point(aes(shape = Sensitivity_class, colour = Drug), size = 3) +
geom_text_repel(aes(label = ID), size = 3) +
theme_classic()
ggplot(data_wide_coculture, aes(x = IC50_uM, y = if_Ki67_tot)) +
geom_smooth(method = 'glm', formula = y ~ x, colour = "grey") +
geom_point(aes(shape = Sensitivity_class, colour = Drug), size = 3) +
geom_text_repel(aes(label = ID), size = 3) +
theme_classic() + scale_color_manual(values=c("#000000", "#AAAAAA"))
